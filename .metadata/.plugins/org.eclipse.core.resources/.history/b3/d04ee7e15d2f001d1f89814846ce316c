package com.BatchProcessing.scheduling;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.JobParametersInvalidException;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;
import org.springframework.batch.core.repository.JobRestartException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.stereotype.Component;

@Component
public class scheduler {
	@Autowired
	private JobLauncher jobLauncher;

	@Autowired
	private Job job;
	

	private static final SimpleDateFormat dateFormat =new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
	
	

	@Scheduled(fixedRate = 5000)
	public void simpleFixedRate() {
		
	        System.out.println("This Task Performed at: " + dateFormat.format(new Date()));
		
	}
//	@Scheduled(fixedDelay = 1000, initialDelay = 3000)
//	   public void simpleFixedDelay() {
//		 	Date now = cal.getTime();
//	        String date = dateFormat.format(now);
//	        System.out.println("This schedule was finished at " + date);
//	   }

//		@Scheduled(cron = "0/15" + " * * * * *")
//		public void simpleCronExpression() {
//
//			Date now = cal.getTime();
//			cal.add(Calendar.SECOND, 5);
//			Date later = cal.getTime();
//			String date = dateFormat.format(later);
//			System.out.println("The next schedule will start at " + date);
//
//		}
	

	
//	@Scheduled(fixedRate = 20000)
//	public void scheduleImportToDB() {
//		
//        JobParameters jobParameters = new JobParametersBuilder()
//        		.addLong("startAt", System.currentTimeMillis()).toJobParameters();
//        try {
//            jobLauncher.run(job, jobParameters);
//        } catch (JobExecutionAlreadyRunningException | JobRestartException | JobInstanceAlreadyCompleteException | JobParametersInvalidException e) {
//            e.printStackTrace();
//        }
//        
//    }
}
